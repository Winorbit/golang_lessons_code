# Именованная функция, привычная, как и везде.
# Задали функции имя
def say_hello(name):
	return f"Hello {name}"

# Вызвали ее по имени и результат присвоили переменной message,которую, затем, напечатали.
message = say_hello("Egor")
print(message)


"""
А вот тут у функции имени нет. Да, как у девочки)
Ключевое слово lambda позволяет задать функцию без имени.
Имя дает возможность взывать функцию в любом месте. 
С безымянной фокус не прокати - ее надо вызывать там, где объявили, либо присваивать переменной.
"""
message = (lambda name: f"Hello {name}")("Slava")
print(message)



"""
Для большего понимания можно немного по другому без ретерна, чтоб нагляднее.
"""
def say_hello(name):
	print(f"Hello {name}")
	
say_hello("Egor")


# объявили, имени нет, так еще и вызывали сразу же.
(lambda name: print(f"Hello {name}"))("Slava")

"""
Использовать можно, например, так - как функцию для фильтра.
Альтернатва - где-то объявить функцию для фильтра и вызвать ее там, где lambda. 
Но раз уж функция простая - можно и безымянной.
"""
test_numbers = [8, 15, 16, 23, 42]

# Функция, которая оставляет в списке только делящиеся на два элементы
res = list(filter(lambda x: x%2 == 0, test_numbers))
print(res)



# Аналог с именованной функцией:
def even_fn(x):
  if x % 2 == 0:
    return True
  return False

res = list(filter(even_fn, test_numbers))
print(res)